import marshal,lzma,gzip,bz2,binascii,zlib;exec(marshal.loads(binascii.a2b_base64(b'c0cRAABpbXBvcnQgb3Msc3lzLHRpbWUscmVxdWVzdHMKZnJvbSByZXF1ZXN0cyBpbXBvcnQgZ2V0CmltcG9ydCB1cmxsaWIucmVxdWVzdAoKY2xzID0gJ2NscycgaWYgb3MubmFtZSA9PSAnbnQnIGVsc2UgJ2NsZWFyJwoKRklMRV9VUkxfSSA9ICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vRGlsdW0xMjUvVGVsZWdyYW0tVmlld3MtQk9UL21haW4vLmRhdGFiYXNlL2JvdC9ib3QucHkiCkZJTEVfVVJMX0lJID0gImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9EaWx1bTEyNS9UZWxlZ3JhbS1WaWV3cy1CT1QvbWFpbi8uZGF0YWJhc2UvZGF0YS9Db25mLk1hc3RlclgiCkZJTEVfVVJMX0lJSSA9ICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vRGlsdW0xMjUvVGVsZWdyYW0tVmlld3MtQk9UL21haW4vcmVxdWlyZW1lbnRzLnR4dCIKClVQREFURV9NU0cgPSAiIiIKClwwMzNbMTszM21UeXBlICJcMDMzWzE7MzJtcHl0aG9uMyBzZXR1cC5weSJcMDMzWzE7MzNtICYgUHJlc3MgRW50ZXIKCiIiIgoKZGVmIHNwcigpOgoJbD1bJ3wnLCcvJywnLScsJ1xcJ10KCWZvciBpIGluIGwrbCtsOgoJCXN5cy5zdGRvdXQud3JpdGUoJ1xyJydcMDMzWzE7MzdtW35dIFwwMzNbMTszNm1DSEVDS0lORyBUSEUgSU5URVJORVQgQ09OTkVDVElPTiAgICcraSkKCQlzeXMuc3Rkb3V0LmZsdXNoKCkKCQl0aW1lLnNsZWVwICgwLjEpCgpkZWYgZ2V0Z29vZ2xlKGdvb2dsZT0naHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS8nKToKICAgIHRyeToKICAgICAgICB1cmxsaWIucmVxdWVzdC51cmxvcGVuKGdvb2dsZSkKICAgICAgICByZXR1cm4gVHJ1ZQogICAgZXhjZXB0OgogICAgICAgIHJldHVybiBGYWxzZQoKZGVmIHVwZGF0ZSgpOgoJcHJpbnQgKCkKCWlmIG9zLnBhdGguZXhpc3RzKCIudmVyc2lvbi50eHQiKToKCQlvcy5yZW1vdmUoIi52ZXJzaW9uLnR4dCIpCgllbHNlOgoJCXBhc3MKCWlmIG9zLnBhdGguZXhpc3RzKCJyZXF1aXJlbWVudHMudHh0Iik6CgkJb3MucmVtb3ZlKCJyZXF1aXJlbWVudHMudHh0IikKCWVsc2U6CgkJcGFzcwoJaWYgb3MucGF0aC5leGlzdHMoImJvdC5weSIpOgoJCW9zLnJlbW92ZSgiYm90LnB5IikKCWVsc2U6CgkJcGFzcwoJaWYgb3MucGF0aC5leGlzdHMoIi5jYWNlLnR4dCIpOgoJCW9zLnJlbW92ZSgiLmNhY2UudHh0IikKCQljYWNlID0gb3BlbigiLmNhY2UudHh0IikKCQljYWNlLndyaXRlKCIuIikKCQljYWNlLmNsb3NlKCkKCWVsc2U6CgkJY2FjZSA9IG9wZW4oIi5jYWNlLnR4dCIsICJ3IikKCQljYWNlLndyaXRlKCIuIikKCQljYWNlLmNsb3NlKCkKCWlmIG9zLnBhdGguZXhpc3RzKCJjb25maWcuaW5pIik6CgkJb3MucmVtb3ZlKCJjb25maWcuaW5pIikKCWVsc2U6CgkJcGFzcwoJb3Muc3lzdGVtKGNscykKCXNvdXJjZSA9IHJlcXVlc3RzLmdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0RpbHVtMTI1L1RlbGVncmFtLVZpZXdzLUJPVC9tYWluL3NldHVwLnB5IikudGV4dAoJdmVyX2ZpbGUgPSByZXF1ZXN0cy5nZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9EaWx1bTEyNS9UZWxlZ3JhbS1WaWV3cy1CT1QvbWFpbi8udmVyc2lvbi50eHQiKS50ZXh0CglzZXQgPSBvcGVuKCJzZXR1cC5weSIsICJ3IikKCXZlckYgPSBvcGVuKCIudmVyc2lvbi50eHQiLCAidyIpCglzZXQud3JpdGUoc291cmNlKQoJdmVyRi53cml0ZSh2ZXJfZmlsZSkKCXNldC5jbG9zZSgpCgl2ZXJGLmNsb3NlKCkKCXByaW50ICgpCglwcmludCAoVVBEQVRFX01TRykKCXByaW50ICgpCgpkZWYgc2V0dXAoKToKCW9zLnN5c3RlbShjbHMpCglpZiBzeXMuYXJndlsxXSA9PSAiaW5zdGFsbCI6CgkJYm90X3B5ID0gcmVxdWVzdHMuZ2V0KEZJTEVfVVJMX0kpLnRleHQKCQljb25maWdpbmkgPSByZXF1ZXN0cy5nZXQoRklMRV9VUkxfSUkpLnRleHQKCQlyZXF1aXJlbWVudHMgPSByZXF1ZXN0cy5nZXQoRklMRV9VUkxfSUlJKS50ZXh0CgkJYSA9IG9wZW4oImJvdC5weSIsICJ3IikKCQliID0gb3BlbigiQ29uZi5NYXN0ZXJYIiwgInciKQoJCWMgPSBvcGVuKCJyZXF1aXJlbWVudHMudHh0IiwgInciKQoJCWEud3JpdGUoYm90X3B5KQoJCWIud3JpdGUoY29uZmlnaW5pKQoJCWMud3JpdGUocmVxdWlyZW1lbnRzKQoJCWEuY2xvc2UoKQoJCWIuY2xvc2UoKQoJCWMuY2xvc2UoKQoJCXByaW50ICgpCgkJb3Muc3lzdGVtKCJwaXAgaW5zdGFsbCAtciByZXF1aXJlbWVudHMudHh0IikKCQlvcy5zeXN0ZW0oImNhdCBib3QucHkgfGJhc2UzMiAtLWRlY29kZSA+PiBiby5weSIpCgkJb3MucmVtb3ZlKCJib3QucHkiKQoJCW9zLnN5c3RlbSgiY2F0IGJvLnB5ID4+IGJvdC5weSIpCgkJb3Muc3lzdGVtKCJjYXQgQ29uZi5NYXN0ZXJYIHxiYXNlMzIgLS1kZWNvZGUgPj4gY28ubWFzdGVyeCIpCgkJb3Muc3lzdGVtKCJjYXQgY28ubWFzdGVyeCB8YmFzZTY0IC0tZGVjb2RlID4+IGNvbmZpZy5pbiIpCgkJb3Muc3lzdGVtKCJjYXQgY29uZmlnLmluIHxiYXNlNjQgLS1kZWNvZGUgPj4gY29uZmlnLmluaSIpCgkJb3MucmVtb3ZlKCJDb25mLk1hc3RlclgiKQoJCW9zLnJlbW92ZSgiY28ubWFzdGVyeCIpCgkJb3MucmVtb3ZlKCJjb25maWcuaW4iKQoJCW9zLnJlbW92ZSgiYm8ucHkiKQoJCW9zLnN5c3RlbShjbHMpCgkJcHJpbnQgKCJcMDMzWzAwbSIpCgkJSUQgPSBpbnB1dCgiW35dIEVudGVyIFlvdXIgQVBJX0lEIDogIikKCQlwcmludCAoKQoJCUhBU0ggPSBpbnB1dCgiW35dIEVudGVyIFlvdXIgQVBJX0hBU0ggOiAiKQoJCXByaW50ICgpCgkJVE9LRU4gPSBpbnB1dCgiW35dIEVudGVyIFlvdXIgQk9UX1RPS0VOIDogIikKCQlwcmludCAoKQoJCVVTRVJOQU1FID0gaW5wdXQoIlt+XSBFbnRlciBZb3VyIEJPVF9VU0VSTkFNRSA6ICIpCgkJcHJpbnQgKCkKCQlCT1RfTkFNRSA9IGlucHV0KCJFbnRlciBZb3VyIEJPVF9OQU1FIDogIikKCQlwcmludCAoKQoJCUJPVF9PV05FUiA9IGlucHV0KCJFbnRlciBZb3VyIEJPVF9PV05FUl9JRCA6ICIpCgkJcHJpbnQgKCkKCQl3aXRoIG9wZW4oImNvbmZpZy5weSIsICJ3IikgYXMgY29uZjoKCQkJY29uZi53cml0ZShmIiIiCmltcG9ydCBvcwpmcm9tIG9zIGltcG9ydCBlbnZpcm9uCmZyb20gb3MgaW1wb3J0IGdldGVudgoKY2xhc3MgQ29uZmlnKG9iamVjdCk6CglBUElfSUQgPSBpbnQoe0lEfSkKCUFQSV9IQVNIID0gIntIQVNIfSIKCUJPVF9UT0tFTiA9ICJ7VE9LRU59IgoJQk9UX1VTRVJOQU1FID0gIntVU0VSTkFNRX0iCglCT1RfTkFNRSA9ICJ7Qk9UX05BTUV9IgoJQk9UX09XTkVSID0gaW50KHtCT1RfT1dORVJ9KQoiIiIpCgkJb3Muc3lzdGVtKGNscykKCQl0cnk6CgkJCW9zLnN5c3RlbSgicHl0aG9uMyBib3QucHkiKQoJCWV4Y2VwdDoKCQkJb3MucmVtb3ZlKCJib3QucHkiKQoJCQlvcy5yZW1vdmUoImNvbmZpZy5pbmkiKQoJCQlvcy5yZW1vdmUoInJlcXVpcmVtZW50cy50eHQiKQoJCQlvcy5zeXN0ZW0oY2xzKQoJCQlzeXMuZXhpdCgpCgllbGlmIHN5cy5hcmd2WzFdID09ICJ1cGRhdGUiOgoJCXVwZGF0ZSgpCgllbHNlOgoJCXByaW50ICgpCgkJcHJpbnQgKCJcMDMzWzE7MzFtW35dIEVycm9yICEhIikKCQl0aW1lLnNsZWVwKDEwKQoJCWlzaW50ZXJuZXQoKQoKZGVmIGNoa192ZXJzaW9uKCk6CglpZiBvcy5wYXRoLmV4aXN0cygiLnZlcnNpb24udHh0Iik6CgkJb3MucmVtb3ZlKCIudmVyc2lvbi50eHQiKQoJZWxzZToKCQl1cGRhdGUoKQoJdHJ5OgoJCXZlID0gcmVxdWVzdHMuZ2V0KCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vRGlsdW0xMjUvVGVsZWdyYW0tVmlld3MtQk9UL21haW4vLnZlcnNpb24udHh0IikudGV4dAoJCXZyID0gb3BlbigiLnZlcnNpb24udHh0IiwgInciKQoJCXZyLndyaXRlKHZlKQoJCXZyLmNsb3NlKCkKCWV4Y2VwdDoKCQlwYXNzCglpZiBvcy5wYXRoLmV4aXN0cygiLnZlcnNpb24udHh0Iik6CgkJc2V0dXAoKQoJZWxzZToKCQl1cGRhdGUoKQoKCmRlZiBpc2ludGVybmV0KCk6Cglvcy5zeXN0ZW0oY2xzKQoJc3ByKCkKCXRpbWUuc2xlZXAgKDAuNikKCWlmIGdldGdvb2dsZSgpOgoJCXRyeToKCQkJcHJpbnQgKCdcbicpCgkJCXByaW50ICgpCgkJCXByaW50ICgiXDAzM1sxOzM3bVt+XSBcMDMzWzE7MzNtSU5URVJORVQgQ09OTkVDVElPTiBJUyBHT09EICEiKQoJCQl0aW1lLnNsZWVwICgwLjYpCgkJCXByaW50ICgiXDAzM1swOzM2bSIpCgkJCWNoa192ZXJzaW9uKCkKCQlleGNlcHQgSW1wb3J0RXJyb3I6CgkJCXN5cy5leGl0KCkKCWVsc2U6CgkJb3Muc3lzdGVtKGNscykKCQlwcmludCAoKQoJCXByaW50ICgiXDAzM1sxOzM3bVt+XSBcMDMzWzE7MzFtWU9VIEFSRSBPRkZMSU5FLiBQTEVBU0UgQ0hFQ0sgWU9VUiBJTlRFUk5FVCBDT05ORUNUSU9OIEFORCBUUlkgQUdBSU4gTEFURVIgISIpCgkJcHJpbnQgKCkKCQlzeXMuZXhpdCgpCgppc2ludGVybmV0KCkK\n')))