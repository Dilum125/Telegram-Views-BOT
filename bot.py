import marshal,lzma,gzip,bz2,binascii,zlib;exec(marshal.loads(binascii.a2b_base64(b'sS*  import os,time,requests
from time import sleep
#from config import Config
from pyrogram import filters, idle, Client
from pyrogram.types import Message
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, CallbackQuery
import asyncio
from pyrogram.types.bots_and_keyboards import reply_keyboard_markup
from requests import post,get
from configparser import ConfigParser
from os import system, name
from threading import Thread, active_count
from re import search, compile
import random

BOT_TOKEN = "5914135198:AAHaE5lX97bdWXfm3oM6XXQ8x5hHxyfcktg"
API_HASH = "23f9a20b91b0c27cc8872f4ff1219717"
API_ID = "20174039"
BOT = "Tg_views_BOT"
BOT_NAME = "Telegram-Views-BOT"
OWNER = int(5262156299)

YOU_ARE_NOT_OWNER = """
**🚫Access Denied🚫**
"""

GITHUB = [
	[
	InlineKeyboardButton("⚡️ Github Repo", url="https://github.com/Dilum125/Telegram-Views-BOT"),
	],
]

LOGO = """

"""
bot = Client(
	"""mars11_views_bot""",
	api_id = f"{API_ID}",
	api_hash = f"{API_HASH}",
	bot_token = f"{BOT_TOKEN}",
	)

STICKERS = (
	"CAACAgIAAxkBAAEQJgxj4nFLrbQeZNAONUB7no4-uXul1AACLgADJHFiGojoNkNqQEMULgQ",
	"CAACAgIAAxkBAAEQJgpj4nE6vfgV9nkza_lvZH06zCwpYQACrwsAAv1pgUph8CTBF6FPxC4E",
	"CAACAgIAAxkBAAEQJghj4nEeK9aJljceu-dHW3UWx92T0gACEQMAAvPjvgsZbp8lnswsJC4E",
	"CAACAgIAAxkBAAEQE5dj3Ku-XB79jGBKHcEnm_raY3dAIAACbwAD29t-AAGZW1Coe5OAdC4E",
	"CAACAgIAAxkBAAEPaudjoCLBbbANSJokpY0g3cuxMkWkzAACQhAAAjPFKUmQDtQRpypKgiwE",
	"CAACAgIAAxkBAAEQJhBj4nGZsRKzXLHBll1ybOi2vrd2NgACdAwAAra7OEuOzqfMQMSAJS4E",
	"CAACAgIAAxkBAAEQKANj4q4eYNRHDoRCb0kOvkVmFCqScAACGAADDbbSGX671giQDJU8LgQ",
	"CAACAgIAAxkBAAEQKAVj4q5fzY3nxUVCrjnFVFCuke7rGAAC0wADVp29CvUyj5fVEvk9LgQ",
	"CAACAgIAAxkBAAEQKAlj4q_AtgABKqd-Wha9U43ZK8QwcV0AAlMAA8A2TxP-AneFeLuuVS4E",
	"CAACAgIAAxkBAAEQKAtj4q_2zy7sFsLpQ-lruf5EWFHzoQACVAADQbVWDGq3-McIjQH6LgQ",
	"CAACAgIAAxkBAAEQKBFj4rCBMdV54j9Z4JgLThaOsCOAVAACpgAD9wLID6sM5POpKsZYLgQ",
	"CAACAgIAAxkBAAEQKBdj4rGQP4GsAvxPgHWRaadh7xTuTQACwAoAAw45S6hHUd5OQ6nQLgQ",
)

STR = [
	[
	InlineKeyboardButton("💬 Updates Channel", url="https://t.me/Team_Mars_11"),
	],
	[
	InlineKeyboardButton(text="💁‍♂ Help", callback_data='helpmenu'),
	],
	[
	InlineKeyboardButton("🔐 Dev", url="https://t.me/About_xyz"),
	InlineKeyboardButton("🤖 Bot", url=f"https://t.me/{BOT}"),
	],
	[
	InlineKeyboardButton(text='➕ Add Me to Your Group ➕', url=f"http://t.me/{BOT}?startgroup=true"),
	],
]

START_MESSAGE = f"""
**🍁 Uwu My Dear... 😴❤️‍🩹,**

**🌙 Welcome To [{BOT_NAME}](https://t.me/{BOT}) 🌿**

**° I am a very usefull bot For U 🌴**
**° I can give you Fake Views For Your Posts 🌝**


**☃️ Note :** `This Bot Don't Provide Any illigal things✨ You Are Fully Responsibe✨ This Bot Is Only For Educational Purpose✨`


**Powered By [MARS-11ᵀᴹ 🇱🇰](https://t.me/+sXRmXtPSbQYzYzg9)**
"""

HELP_MSG = """
**Commands :**

    **» /start**
    **» /post** `POST_LINK`
"""

STR_PIC = "https://graph.org/file/019325df66dd8baa0f45b.jpg"

BACK_BUTTONS = [
	[
	InlineKeyboardButton("⚡️ Github", url="https://github.com/Dilum125/Telegram-Views-BOT"),
	],
	[
	InlineKeyboardButton('🔙 Back', callback_data="Back"),
	],
]

@bot.on_message(filters.command("start") & filters.private)
async def startcmd(bot, message):
	puser_id = message.from_user.id
	if puser_id == OWNER:
		STICKER = random.choice(STICKERS)
		z = await bot.send_sticker(message.from_user.id, STICKER)
		sleep(2.1)
		await z.delete()
		reply_markup = InlineKeyboardMarkup(STR)
		await bot.send_photo(
			message.chat.id,
			photo=STR_PIC,
			caption=f"""
**🍁 Uwu My Dear [{message.from_user.first_name}](tg://user?id={message.from_user.id})😗**

**🌙 Welcome To [{BOT_NAME}](https://t.me/{BOT}) 🌿**

**° I am a very usefull bot For U 🌴**
**° I can give you Fake Views For Your Posts 🌝**


**☃️ Note :** `This Bot Don't Provide Any illigal things✨ You Are Fully Responsibe✨ This Bot Is Only For Educational Purpose✨`


**Powered By [MARS-11ᵀᴹ 🇱🇰](https://t.me/+sXRmXtPSbQYzYzg9)**
""",
			reply_markup=reply_markup
		)
	else:
		await bot.send_message(message.chat.id, YOU_ARE_NOT_OWNER, reply_markup=InlineKeyboardMarkup(GITHUB), disable_web_page_preview=True)

@bot.on_message(filters.command("post") & filters.private)
async def postviews(bot, message):
	user_id = message.from_user.id
	await bot.send_message(message.chat.id, text=f"`Sending Views in Progress...😴❤️‍🩹`", disable_web_page_preview=True)
	if user_id == OWNER:
		post_link = message.text.split(None, 1)[1]
		THREADS = 500
		PROXIES_TYPES = ('http', 'socks4', 'socks5')
		USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36'
		REGEX = compile(r"(?:^|\D)?(("+ r"(?:[1-9]|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])"
		                + r"\." + r"(?:\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])"
		                + r"\." + r"(?:\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])"
		                + r"\." + r"(?:\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])"
		                + r"):" + (r"(?:\d|[1-9]\d{1,3}|[1-5]\d{4}|6[0-4]\d{3}"
		                + r"|65[0-4]\d{2}|655[0-2]\d|6553[0-5])")
		                + r")(?:\D|$)")
		errors = open('.cace.txt', 'a+')
		cfg = ConfigParser(interpolation=None)
		cfg.read("config.ini", encoding="utf-8")
		http, socks4, socks5 = '', '', ''
		try: http, socks4, socks5 = cfg["HTTP"], cfg["SOCKS4"], cfg["SOCKS5"]
		except KeyError: print(' [ OUTPUT ] Error | config.ini not found!')
		http_proxies, socks4_proxies, socks5_proxies = [], [], []
		proxy_errors, token_errors = 0, 0
		channel, post, time_out, real_views = '', 0, 15, 0
		def scrap(sources, _proxy_type):
		    for source in sources:
		        if source:
		            try: response = requests.get(source, timeout=time_out)
		            except Exception as e: errors.write(f'{e}\n')
		            if tuple(REGEX.finditer(response.text)):
		                for proxy in tuple(REGEX.finditer(response.text)):
		                    if _proxy_type == 'http': http_proxies.append(proxy.group(1))
		                    elif _proxy_type == 'socks4': socks4_proxies.append(proxy.group(1))
		                    elif _proxy_type == 'socks5': socks5_proxies.append(proxy.group(1))
		def start_scrap():
		    threads = []
		    for i in (http_proxies, socks4_proxies, socks5_proxies): i.clear()
		    for i in ((http.get("Sources").splitlines(), 'http'), (socks4.get("Sources").splitlines(), 'socks4'), (socks5.get("Sources").splitlines(), 'socks5')):
		        thread = Thread(target=scrap, args=(i[0], i[1]))
		        threads.append(thread)
		        thread.start()
		    for t in threads: t.join()
		def get_token(proxy, proxy_type):
		    try:
		        session = requests.session()
		        response = session.get(f'https://t.me/{channel}/{post}', params={'embed': '1', 'mode': 'tme'},
		                    headers={'referer': f'https://t.me/{channel}/{post}', 'user-agent': USER_AGENT},
		                    proxies={'http': f'{proxy_type}://{proxy}', 'https': f'{proxy_type}://{proxy}'},
		                    timeout=time_out)
		        return search('data-view="([^"]+)', response.text).group(1), session
		    except AttributeError: return 2
		    except requests.exceptions.RequestException: 1
		    except Exception as e: return errors.write(f'{e}\n')
		def send_view(token, session, proxy, proxy_type):
		    try:
		        cookies_dict = session.cookies.get_dict()
		        response = session.get('https://t.me/v/', params={'views': str(token)}, cookies={
		            'stel_dt': '-240', 'stel_web_auth': 'https%3A%2F%2Fweb.telegram.org%2Fz%2F',
		            'stel_ssid': cookies_dict.get('stel_ssid', None), 'stel_on': cookies_dict.get('stel_on', None)},
		                            headers={'referer': f'https://t.me/{channel}/{post}?embed=1&mode=tme',
		                                'user-agent': USER_AGENT, 'x-requested-with': 'XMLHttpRequest'},
		                            proxies={'http': f'{proxy_type}://{proxy}', 'https': f'{proxy_type}://{proxy}'},
		                            timeout=time_out)
		        return True if (response.status_code == 200 and response.text == 'true') else False
		    except requests.exceptions.RequestException: 1
		    except Exception: pass
		def control(proxy, proxy_type):
		    global proxy_errors, token_errors
		    token_data = get_token(proxy, proxy_type)
		    if token_data == 2: token_errors += 1
		    elif token_data == 1: proxy_errors += 1
		    elif token_data:
		        send_data = send_view(token_data[0], token_data[1], proxy, proxy_type)
		        #if send_data == 1: proxy_errors += 1
		def start_view():
		    c, threads = 0, []
		    start_scrap()
		    for i in [http_proxies, socks4_proxies, socks5_proxies]:
		        for j in i:
		            thread = Thread(target=control, args=(j, PROXIES_TYPES[c]))
		            threads.append(thread)
		            while active_count() > THREADS: sleep(0.05)
		            thread.start()
		        c += 1
		        sleep(2)
		    for t in threads:
		        t.join()
		        start_view()
		def check_views():
		    global real_views
		    while True:
		        try:
		            telegram_request = requests.get(f'https://t.me/{channel}/{post}', params={'embed': '1', 'mode': 'tme'},
		                                headers={'referer': f'https://t.me/{channel}/{post}', 'user-agent': USER_AGENT})
		            real_views = search('<span class="tgme_widget_message_views">([^<]+)', telegram_request.text).group(1)
		            sleep(2)
		        except: pass
		def tui():
		    while True:
		        print(f'''
		{LOGO}
		        ''')
		        sleep(2);system('cls' if name == 'nt' else 'clear')
		channel, post = post_link.replace('https://t.me/', '').split('/')
		try:
		    search('<span class="tgme_widget_message_views">([^<]+)', requests.get(f'https://t.me/{channel}/{post}',
		    params={'embed': '1', 'mode': 'tme'}, headers={'referer': f'https://t.me/{channel}/{post}', 'user-agent': USER_AGENT}).text).group(1)
		except: await message.reply_text(' **Channel Or Post Not Found! 😟**')
		else:
		    Thread(target=start_view).start()
		    Thread(target=check_views).start()
		    sleep(7.5);system('cls' if name == 'nt' else 'clear')
		    Thread(target=tui).start()
	else:
		await bot.send_message(message.chat.id, YOU_ARE_NOT_OWNER, reply_markup=InlineKeyboardMarkup(GITHUB), disable_web_page_preview=True)

@bot.on_callback_query()
def callback_query(Client, Callback_Query):
	if Callback_Query.data == "helpmenu":
		Callback_Query.edit_message_text(
			HELP_MSG,
			reply_markup=InlineKeyboardMarkup(BACK_BUTTONS),
		)
	elif Callback_Query.data == "Back":
		Callback_Query.edit_message_text(
			START_MESSAGE,
			reply_markup=InlineKeyboardMarkup(STR),
			disable_web_page_preview=True,
		)


print ()
print ("Starting...")
bot.run()
\n')))